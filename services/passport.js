const passport = require('passport') //gives express way to handle authentication 
const GoogleStrategy = require('passport-google-oauth20').Strategy
const keys = require('../src/config/dev_keys')
const mongoose = require('mongoose')

const User = mongoose.model('users') //access to mongo model class, fetching users from mongoose

//Serialize user to create cookie for user
passport.serializeUser((user, done) => {
    done(null, user.id) //This user refers to the user id generated by mongo, __id:{oid:}, identifies users stored in the database
}) //mongoose model => ID

passport.deserializeUser((id, done) => {
    User.findById(id).then(user => done(null, user))
}) //ID => Mongoose Model


passport.use(new GoogleStrategy({
        clientID: keys.googleClientID,
        clientSecret: keys.googleClientSecret,
        callbackURL: '/auth/google/callback'
    },
     (accessToken, refreshToken, profile, done) => {
         //Promise is a tool we use with JS to handle asynchronous code

        User.findOne({ googleID: profile.id }) //Makes sure unique users are saved, returns a promise
            .then((existingUser) => {
                if(existingUser){
                    done(null, existingUser)
                }
                else{
                    new User({
                        googleID: profile.id,
                        name: profile.displayName
                    }).save() //Take Model Instance and save to database!
                    .then(user => done(null, user))
                }
            }) 

    })
);
